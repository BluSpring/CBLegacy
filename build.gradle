import java.util.stream.Collectors

buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://ldtteam.jfrog.io/ldtteam/modding/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.25', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.10"
}

repositories {
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven {
        name = "CurseForge"
        url = "https://cursemaven.com/"
    }
}

final Collection<String> customRepositories = repositories.stream().map({it -> it.name}).collect(Collectors.toList());

repositories.all {
    if (customRepositories.contains(it.name))
        return;

    if (it.name.startsWith("BUNDELED"))
        return;

    repositories.remove(it)
}


afterEvaluate {
    repositories.removeIf({r -> r.name != 'LDTTeam - Modding' && r.name != 'CurseForge'})
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
        resources {
            srcDir 'src/api/resources'
        }
        compileClasspath += configurations.getByName("minecraft")
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            // copy everything else, but blender files.
            exclude '**/*.blend'
            //Add the generated main module resources
            srcDirs += 'src/datagen/generated/chiselsandbits'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    datagen {
        java {
            srcDir 'src/datagen/java'
        }
        resources {
            srcDir 'src/datagen/resources'
        }
        compileClasspath += configurations.getByName("minecraft")
        runtimeClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    documentation {
        java {
            srcDir 'src/documentation/java'
        }
        resources {
            srcDir 'src/documentation/resources'
        }
        compileClasspath += configurations.getByName("minecraft")
        runtimeClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

version = System.getenv().containsKey("VERSION") ? System.getenv().get("VERSION") : modVersion
group = modGroup
archivesBaseName = modBaseName

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

minecraft {
    mappings channel: "${project.mcpChannel}", version: "${project.mcpVersion}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                chiselsandbits {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                chiselsandbits {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                chiselsandbits {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        generateData { rc ->
            workingDirectory project.file('run')
            parent project.minecraft.runs.data

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            rc.getArgs().clear()
            args '--all', '--output', file('src/datagen/generated/chiselsandbits'),
                    '--mod', 'chiselsandbits',
                    '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                chiselsandbits {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.datagen
                }
            }

            project.afterEvaluate {
                lazyToken('minecraft_classpath') {
                    project.configurations.datagenLibrary.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
                }
            }
        }

        generateDocumentation {
            workingDirectory project.file('run')
            parent project.minecraft.runs.data

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--all', '--output', file('src/documentation/generated/chiselsandbits'),
                    '--mod', 'chiselsandbits',
                    '--existing', sourceSets.main.resources.srcDirs[0],
                    '--existing', file('src/datagen/generated/chiselsandbits')

            mods {
                chiselsandbits {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.documentation
                }
            }

            project.afterEvaluate {
                lazyToken('minecraft_classpath') {
                    project.configurations.documentationLibrary.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
                }
            }
        }
    }
}

configurations {
    datagenLibrary
    datagenImplementation.extendsFrom datagenLibrary

    documentationLibrary
    documentationImplementation.extendsFrom documentationLibrary
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${project.exactMinecraftVersion}-${project.forgeVersion}"

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${project.exactMinecraftVersion}:${project.jeiVersion}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${project.exactMinecraftVersion}:${project.jeiVersion}")

    // Add spark to track performance issues.
    // runtimeOnly fg.deobf("curse.maven:spark-361579:3245792")

    // data generators.
    apiImplementation "com.ldtteam:datagenerators:${project.dataGeneratorsVersion}"
    implementation "com.ldtteam:datagenerators:${project.dataGeneratorsVersion}"
    datagenLibrary "com.ldtteam:datagenerators:${project.dataGeneratorsVersion}"
    documentationLibrary "com.ldtteam:datagenerators:${project.dataGeneratorsVersion}"

    // unit testing
    testImplementation 'junit:junit:4.11'
    testImplementation "org.mockito:mockito-core:1.+"
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.5'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.5'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4-rule-agent', version: '1.6.5'

    testImplementation 'org.assertj:assertj-core:3.9.0'

    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    //Utilities
    apiImplementation 'org.jetbrains:annotations:+'
    datagenImplementation 'org.jetbrains:annotations:+'
    documentationImplementation 'org.jetbrains:annotations:+'
    implementation 'org.jetbrains:annotations:+'
    testImplementation 'org.jetbrains:annotations:+'
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output

    manifest {
        attributes([
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}:universal",
                'Timestamp': System.currentTimeMillis(),
                "Specification-Title": "Chisels & Bits",
                "Specification-Vendor": "ldtteam",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :"ldtteam",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    classifier = 'universal'
}

tasks.whenObjectAdded {
    if (it.name == "prepareRunGenerateDocumentation") {
        it.doFirst {
            def iconsDirectory = project.file('src/datagen/generated/chiselsandbits/icons')
            if (iconsDirectory.exists()) {
                project.getLogger().lifecycle("Executing 'prepareRunGenerateDocumentation' with existing icon directory. Deleting...")
                iconsDirectory.delete()
            }
        }
    }
}