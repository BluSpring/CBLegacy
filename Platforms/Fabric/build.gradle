plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"

repositories {
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation project(":Common")
    implementation project(":API")
    implementation project(":Platforms:Core")

    compileOnly 'org.jetbrains:annotations:16.0.2'
    testCompileOnly 'org.jetbrains:annotations:16.0.2'
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir(project.rootProject.projectDir.toPath().relativize(project(":Platforms:Fabric").file("run").toPath()).toString())
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir(project.rootProject.projectDir.toPath().relativize(project(":Platforms:Fabric").file("run").toPath()).toString())
        }
    }

    accessWidenerPath = project.rootProject.file("Platforms/Core/src/main/resources/${mod_id}.accesswidener")
}


processResources {
    from project(":Common").sourceSets.main.resources
    from project(":API").sourceSets.main.resources
    from project(":Platforms:Core").sourceSets.main.resources

    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
    source(project(":API").sourceSets.main.allSource)
    source(project(":Platforms:Core").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
    }
}